@page "/my-orders"
@using Restaurant.UI.Components.Table
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@attribute [Authorize]
@inject IJSRuntime JSRuntime;
@inject IOrderService OrderService;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<h3>MyOrders</h3>

@if (!_orders.Any())
{
    <p><em>You haven't ordered any products</em></p>
}
else
{
    <TableComponent Items="_orders.ToList()">
        <DataColumn TRowData="OrderDto" Title="Id" Expression="o => o.Id" />
        <DataColumn TRowData="OrderDto" Title="Order Number" Expression="o => o.OrderNumber" />
        <DataColumn TRowData="OrderDto" Title="Product Name" Expression="o => o.Email" />
        <DataColumn TRowData="OrderDto" Title="Price" Expression="o => o.Price" Format="{0:0.00}" />
        <DataColumn TRowData="OrderDto" Title="Created" Expression="o => o.Created" />
        <DataColumn TRowData="OrderDto" Title="Action">
            <button class="btn btn-primary" @onclick="() => ShowDetails(context.Id)">
                Details
            </button>
        </DataColumn>
    </TableComponent>
}

@code {
    private IEnumerable<OrderDto> _orders = new List<OrderDto>();
    private string _email = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _email = authState?.User?.Claims?.SingleOrDefault(c => c.Type == "email")?.Value ?? "";
        _orders = await OrderService.GetAllByEmailAsync(_email);
        await base.OnInitializedAsync();
    }

    private async Task ShowDetails(Guid id)
    {
        await JSRuntime.InvokeVoidAsync("open", $"/orders/view/{id}", "_blank");
    }
}
