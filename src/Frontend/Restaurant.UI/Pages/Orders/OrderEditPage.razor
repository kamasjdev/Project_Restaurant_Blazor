@page "/orders/edit/{Id:guid}"
@using Restaurant.UI.Components
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.LoadingIcon
@using Restaurant.UI.Components.Orders
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@inject IOrderService OrderService;
@inject IProductService ProductService;
@inject IAdditionService AdditionService;
@inject NavigationManager NavigationManager;
@inject ILogger<OrderEditPage> Logger;

<AuthorizationComponent Roles="admin" />
<h3>OrderEditPage</h3>

@if (_loading)
{
    <LoadingIconComponent />
}
else
{
    @if (_order is null)
    {
        <ErrorComponent Text="@($"Order with id: '{Id}' was not found")" />
    }
    else
    {
        @if (!string.IsNullOrWhiteSpace(_error))
        {
            <ErrorComponent Text="@_error" />
        }
        <OrderEditComponent Order="_order" Products="_products" Additions="_additions" OnSend="Send" />
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private bool _loading = true;
    private OrderDetailsDto? _order;
    private IEnumerable<ProductDto> _products = new List<ProductDto>();
    private IEnumerable<AdditionDto> _additions = new List<AdditionDto>();
    private string _error = "";

    protected override async Task OnInitializedAsync()
    {
        var order = OrderService.GetAsync(Id);
        var products = ProductService.GetAllAsync();
        var additions = AdditionService.GetAllAsync();
        var tasks = new List<Task>() { order, products, additions };
        try
        {   
            await Task.WhenAll(tasks);
            _order = await order;
            _products = await products;
            _additions = await additions;
        }
        catch (Exception exception)
        {
            if (exception is RpcException)
            {
                var status = ((RpcException)exception).Status;

                if (status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    _error = status.Detail;
                }
                else
                {
                    _error = "Something bad happen please try again later";
                }
            }

            Logger.LogError(exception, exception.Message);
        }
        await base.OnInitializedAsync();
        _loading = false;
    }

    private async Task Send(OrderDetailsDto dto)
    {
        try
        {
            _error = "";
            await OrderService.UpdateAsync(new AddOrderDto
            {
                Id = dto.Id,
                Email = dto.Email,
                Note = dto.Note,
                ProductSaleIds = dto.Products.Select(ps => ps.Id)
            });
            NavigationManager.NavigateTo("/orders");
        }
        catch (Exception exception)
        {
            if (exception is RpcException)
            {
                var status = ((RpcException)exception).Status;

                if (status.StatusCode is StatusCode.PermissionDenied or StatusCode.FailedPrecondition)
                {
                    _error = status.Detail;
                }
                else
                {
                    _error = "Something bad happen please try again later";
                }
            }

            Logger.LogError(exception, exception.Message);
        }
    }
}
