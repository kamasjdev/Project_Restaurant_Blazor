@page "/orders/view/{Id:guid}"
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.LoadingIcon
@using Restaurant.UI.Components.NavigationButton
@using Restaurant.UI.Components.Orders
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@attribute [Authorize]
@inject IOrderService OrderService;
@inject ILogger<OrderViewPage> Logger;

<h3>OrderViewPage</h3>

@if(_loading)
{
    <LoadingIconComponent />
}
else
{
    @if (!string.IsNullOrWhiteSpace(_error))
    {
        <ErrorComponent Text="@_error" />
    }
    else
    {
        <OrderViewComponent Order="_order" />
    }
    <NavigationButtonComponent Text="Back to Orders" Url="/orders" />
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private bool _loading = true;
    private OrderDetailsDto? _order;
    private string _error = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _order = await OrderService.GetAsync(Id);
        }
        catch (Exception exception)
        {
            if (exception is RpcException)
            {
                var status = ((RpcException)exception).Status;

                if (status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    _error = status.Detail;
                }
                else
                {
                    _error = "Something bad happen please try again later";
                }
            }

            Logger.LogError(exception, exception.Message);
        }
        await base.OnInitializedAsync();
        _loading = false;
    }
}
