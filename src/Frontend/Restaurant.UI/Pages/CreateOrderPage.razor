@page "/create-order"
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.LoadingIcon
@using Restaurant.UI.Components.Orders
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@attribute [Authorize]
@inject IProductService ProductService;
@inject IAdditionService AdditionService;
@inject IProductSaleService ProductSaleService;
@inject IOrderService OrderService;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager NavigationManager;
@inject ILogger<CreateOrderPage> Logger;

<h3>Create Order</h3>


@if (!string.IsNullOrWhiteSpace(_error))
{
	<ErrorComponent Text="@_error" />
}
@if (_loading)
{
    <LoadingIconComponent />
}
else
{
    <CreateOrderFormComponent Email="@_email" Products="@_products" Additions="@_additions" ProductSales="@_productsInCart" OnSend="AddOrder" />
}

@code {
    private bool _loading { get; set; } = true;
    private IEnumerable<ProductDto>? _products { get; set; }
    private IEnumerable<AdditionDto>? _additions { get; set; }
    private IEnumerable<ProductSaleDto> _productsInCart { get; set; } = new List<ProductSaleDto>();
    private string _email = "";
    private string _error = "";

    protected override async Task OnInitializedAsync()
    {
        _products = await ProductService.GetAllAsync();
        _additions = await AdditionService.GetAllAsync();
        _productsInCart = await ProductSaleService.GetAllInCartByEmailAsync(_email);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _email = authState?.User?.Claims?.SingleOrDefault(c => c.Type == "email")?.Value;
        try
        {
            _productsInCart = await ProductSaleService.GetAllInCartByEmailAsync(_email);
        }
        catch (Exception exception)
        {
            if (exception is RpcException)
            {
                var status = ((RpcException)exception).Status;

                if (status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    _error = status.Detail;
                }
                else
                {
                    _error = "Something bad happen please try again later";
                }
            }

            Logger.LogError(exception, exception.Message);
        }

        await base.OnInitializedAsync();
        _loading = false;
    }

    private async Task AddOrder(AddOrderDto addOrderDto)
    {
        try
        {
            _error = "";
            await OrderService.AddAsync(addOrderDto);
            NavigationManager.NavigateTo($"/orders/view/{addOrderDto.Id}");
        }
        catch (Exception exception)
        {
            if (exception is RpcException)
            {
                var status = ((RpcException)exception).Status;

                if (status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    _error = status.Detail;
                }
                else
                {
                    _error = "Something bad happen please try again later";
                }
            }

            Logger.LogError(exception, exception.Message);
        }
    }
}
