@page "/products/view/{id:guid}"
@using Restaurant.UI.Components.Products
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.LoadingIcon
@using Restaurant.UI.Components.NavigationButton
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@attribute [Authorize]
@inject IProductService ProductService;

<h3>ViewProductPage</h3>

@if (Loading)
{
        <LoadingIconComponent />
}
else
{
    @if (Product is null)
    {
        <div class="mt-2">
            <ErrorComponent Text="@($"Product with id: '{Id}' was not found")" />
        </div>
    }
    else
    {
        <div class="mt-2">
            <ProductViewComponent Product="Product" />
        </div>
    }
        <div class="mt-2">
            <NavigationButtonComponent Url="/products" Text="Back to Products" />
        </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private bool Loading { get; set; } = true;

    private ProductDto? Product;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Product = await ProductService.GetAsync(Id);
        Loading = false;
    }
}
