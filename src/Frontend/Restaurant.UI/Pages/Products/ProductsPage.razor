@page "/products"
@using Restaurant.UI.Components.LoadingIcon
@using Restaurant.UI.Components.Modal
@using Restaurant.UI.Components.Table
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@inject IProductService ProductService;
@inject NavigationManager NavigationManager;

<h3>ProductsPage</h3>
<button class="btn btn-success" @onclick='() => NavigationManager.NavigateTo("/products/add")'>
    Add
</button>

@if (Loading)
{
    <LoadingIconComponent />
}
else
{
    <TableComponent Items="products">
        <DataColumn TRowData="ProductDto" Title="Id" Expression="p => p.Id" />
        <DataColumn TRowData="ProductDto" Title="Name" Expression="p => p.ProductName" />
        <DataColumn TRowData="ProductDto" Title="Price" Expression="p => p.Price" Format="{0:0.00}" />
        <DataColumn TRowData="ProductDto" Title="Kind" Expression="p => p.ProductKind" />
        <DataColumn TRowData="ProductDto" Title="Action">
            <button class="btn btn-primary me-2" @onclick='() => NavigationManager.NavigateTo($"/products/view/{context.Id}")'>
                Details
            </button>
            <button class="btn btn-warning me-2" @onclick='() => NavigationManager.NavigateTo($"/products/edit/{context.Id}")'>
                Edit
            </button>
            <button class="btn btn-danger" @onclick="() => OpenModal(context)">
                Delete
            </button>
        </DataColumn>
    </TableComponent>
}

@if (IsModalOpen)
{
    <ModalComponent Title="Delete Product" OnClose="CloseModal">
        <Body>
            <div class="text-info-delete">
                Do you wish to delete addition @ProductToDelete?.ProductName with id @ProductToDelete?.Id
            </div>
        </Body>
        <Footer>
            <button class="btn btn-danger me-2" @onclick="DeleteProduct">
                Yes
            </button>
            <button class="btn btn-secondary" @onclick="CloseModal">
                No
            </button>
        </Footer>
    </ModalComponent>
}

@code {
    private ICollection<ProductDto>? products;
    private ProductDto? ProductToDelete;

    private bool IsModalOpen { get; set; } = false;
    private bool Loading { get; set; }

    private async Task FetchProducts()
    {
        Loading = true;
        await Task.Delay(2000);
        products = new List<ProductDto>(await ProductService.GetAllAsync());
        Loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await FetchProducts();
    }

    private void OpenModal(ProductDto productDto)
    {
        IsModalOpen = true;
        ProductToDelete = productDto;
    }

    private void CloseModal()
    {
        IsModalOpen = false;
    }

    private async Task DeleteProduct()
    {
        if (ProductToDelete is null)
        {
            IsModalOpen = false;
            return;
        }

        await ProductService.DeleteAsync(ProductToDelete.Id);
        IsModalOpen = false;
        await FetchProducts();
    }
}
