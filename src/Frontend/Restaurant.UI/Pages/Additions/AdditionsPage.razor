@page "/additions"
@using Restaurant.UI.Components.Modal
@using Restaurant.UI.Components.Table
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@inject IAdditionService AdditionService;
@inject NavigationManager NavigationManager;

<h3>AdditionsPage</h3>
<button class="btn btn-success" @onclick='() => NavigationManager.NavigateTo("/additions/add")'>
    Add
</button>

<TableComponent Items="additions">
    <DataColumn TRowData="AdditionDto" Title="Id" Expression="a => a.Id" />
    <DataColumn TRowData="AdditionDto" Title="Name" Expression="a => a.AdditionName" />
    <DataColumn TRowData="AdditionDto" Title="Price" Expression="a => a.Price" />
    <DataColumn TRowData="AdditionDto" Title="Kind" Expression="a => a.AdditionKind" />
    <DataColumn TRowData="AdditionDto" Title="Action">
        <button class="btn btn-primary me-2">
            Details
        </button>
        <button class="btn btn-warning me-2" @onclick='() => NavigationManager.NavigateTo($"/additions/edit/{context.Id}")'>
            Edit
        </button>
        <button class="btn btn-danger" @onclick="OpenModal">
            Delete
        </button>
    </DataColumn>
</TableComponent>

@if (IsModalOpen)
{
    <ModalComponent Title="New Title" OnClose="CloseModal">
        <Body>
            This is text test
            <p>Next text</p>
            <div>
                Abc
            </div>
        </Body>
        <Footer>
            <button class="btn btn-primary">
                Test
            </button>
        </Footer>
    </ModalComponent>
}

@code {
    private ICollection<AdditionDto>? additions;

    private bool IsModalOpen { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(2000);
        additions = new List<AdditionDto>(await AdditionService.GetAllAsync());
        await base.OnInitializedAsync();
        return;
    }

    private void OpenModal()
    {
        IsModalOpen = true;
    }

    private void CloseModal()
    {
        IsModalOpen = false;
    }
}
