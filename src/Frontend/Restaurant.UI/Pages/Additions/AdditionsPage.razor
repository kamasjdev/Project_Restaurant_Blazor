@page "/additions"
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.LoadingIcon
@using Restaurant.UI.Components.Modal
@using Restaurant.UI.Components.Table
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@attribute [Authorize]
@inject IAdditionService AdditionService;
@inject NavigationManager NavigationManager;
@inject ILogger<AdditionsPage> Logger;

<h3>AdditionsPage</h3>
<AuthorizeView Roles="admin">
    <Authorized>
        <button class="btn btn-success" @onclick='() => NavigationManager.NavigateTo("/additions/add")'>
            Add
        </button>
    </Authorized>
</AuthorizeView>


@if (Loading)
{
    <LoadingIconComponent />
}
else
{
    @if (string.IsNullOrWhiteSpace(_error))
    {
        <div class="mb-2">
            <ErrorComponent Text="@_error"/>
        </div>
    }
    <TableComponent Items="additions">
        <DataColumn TRowData="AdditionDto" Title="Id" Expression="a => a.Id" />
        <DataColumn TRowData="AdditionDto" Title="Name" Expression="a => a.AdditionName" />
        <DataColumn TRowData="AdditionDto" Title="Price" Expression="a => a.Price" Format="{0:0.00}" />
        <DataColumn TRowData="AdditionDto" Title="Kind" Expression="a => a.AdditionKind" />
        <DataColumn TRowData="AdditionDto" Title="Action">
            <button class="btn btn-primary me-2" @onclick='() => NavigationManager.NavigateTo($"/additions/view/{context.Id}")'>
                Details
            </button>
            <AuthorizeView Context="Auth" Roles="admin">
                <Authorized>
                    <button class="btn btn-warning me-2" @onclick='() => NavigationManager.NavigateTo($"/additions/edit/{context.Id}")'>
                        Edit
                    </button>
                    <button class="btn btn-danger" @onclick="() => OpenModal(context)">
                        Delete
                    </button>
                </Authorized>
            </AuthorizeView>
        </DataColumn>
    </TableComponent>
}

@if (IsModalOpen)
{
    <ModalComponent Title="Delete Addition" OnClose="CloseModal">
        <Body>
            <div class="text-info-delete">
                Do you wish to delete addition @AdditionToDelete?.AdditionName with id @AdditionToDelete?.Id
            </div>
            <div class="mt-2">
                <ErrorComponent Text="@_errorDelete" />
            </div>
        </Body>
        <Footer>
            <button class="btn btn-danger me-2" @onclick="DeleteAddition">
                Yes
            </button>
            <button class="btn btn-secondary" @onclick="CloseModal">
                No
            </button>
        </Footer>
    </ModalComponent>
}

@code {
    private ICollection<AdditionDto>? additions;
    private AdditionDto? AdditionToDelete;

    private bool IsModalOpen { get; set; } = false;

    private bool Loading { get; set; } = true;

    private string _error = "";
    private string _errorDelete = "";

    private async Task FetchAdditions()
    {
        Loading = true;
        try 
        {
            additions = new List<AdditionDto>(await AdditionService.GetAllAsync());
        }
        catch (Exception exception)
        {
            _error = "Something bad happen please try again later";

            if (exception is RpcException)
            {
                var grpcException = exception as RpcException;
                if (grpcException.Status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    _error = grpcException.Status.Detail;
                }
            }

            Logger.LogError(exception, _error);
        }
        Loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await FetchAdditions();
    }

    private void OpenModal(AdditionDto additionDto)
    {
        IsModalOpen = true;
        AdditionToDelete = additionDto;
        _errorDelete = "";
    }

    private void CloseModal()
    {
        _errorDelete = "";
        AdditionToDelete = null;
        IsModalOpen = false;
    }

    private async Task DeleteAddition()
    {
        _errorDelete = "";
        try 
        {
            await AdditionService.DeleteAsync(AdditionToDelete.Id);
            CloseModal();
            await FetchAdditions();
        }
        catch(Exception exception)
        {
            _error = "Something bad happen please try again later";

            if (exception is RpcException)
            {
                var grpcException = exception as RpcException;
                if (grpcException.Status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    _error = grpcException.Status.Detail;
                }
            }

            Logger.LogError(exception, _error);
        }
    }
}
