@using Restaurant.UI.Components.Additions
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.NavigationButton
@using Restaurant.UI.Components.Products
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@inject IProductSaleService ProductSaleService;

@if (!string.IsNullOrWhiteSpace(Errors))
{
    <ErrorComponent Text="@Errors" />
    <NavigationButtonComponent Text="Go back to Home" Url="/" />
}
else
{
    <div class="info-text mb-2">
        Products:
    </div>
    <div class="item-list mb-2">
        @foreach (var product in Products)
        {
            <div class="me-2 mb-2">
                <ProductViewComponent CssClass="@(_productToAdd is not null && _productToAdd.Id == product.Id ? "bg-info" : "")" Product="product" OnClick="() => ProductChoosed(product)" />
            </div>
        }
    </div>
    <div class="info-text mb-2">
        Additions:
    </div>
    <div class="item-list mb-2">
        @foreach(var addition in Additions)
        {
            <div class="me-2 mb-2">
                <AdditionViewComponent CssClass="@(_additionToAdd is not null && _additionToAdd.Id == addition.Id ? "bg-info" : "")" Addition="addition" OnClick="() => AdditionChoosed(addition)" />
            </div>
        }
    </div>
    <div class="mb-2">
        <button class="btn btn-success  @(_productToAdd is not null ? "" : "disabled")" @onclick="() => AddProductSale()">
            Add to Order
        </button>
    </div>
    <div>
        <div class="mb-2">
            <button class="btn btn-danger @(_productSaleToDelete == Guid.Empty ? "disabled" : "")" @onclick="() => DeleteProductSale()">
                Delete
            </button>
        </div>
        <table class="table table-striped table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <td>Id</td>
                    <td>Product Id</td>
                    <td>Product Name</td>
                    <td>Addition Id</td>
                    <td>Addition Name</td>
                    <td>Cost</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var productSale in _productSales)
                {
                    <tr @onclick="() => MarkToDelete(productSale)" class="@(_productSaleToDelete == productSale.Id ? "bg-success" : "")">
                        <td>
                            @productSale.Id
                        </td>
                        <td>
                            @productSale.Product.Id
                        </td>
                        <td>
                            @productSale.Product.ProductName
                        </td>
                        <td>
                            @(productSale.Addition is not null ? productSale.Addition.Id : "-")
                        </td>
                        <td>
                            @(productSale.Addition is not null ? productSale.Addition.AdditionName : "-")
                        </td>
                        <td>
                            @productSale.EndPrice
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="text-start w-25">
        <table class="table mt-2">
            <thead>
                <tr>
                    <th scope="col">Total Cost</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@_productSales.Sum(p => p.EndPrice).ToString("0.00")</td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="mt-2">
        <div class="info-text">
            Notes:
        </div>
        <textarea class="form-control text-area" @bind="@_note" maxlength="5000" />
    </div>
    <div class="mt-4 mb-2 text-center">
        <button class="btn btn-primary @(!_productSales.Any() ? "disabled" : "")" @onclick="() => CreateOrder()">
            Create Order
        </button>
    </div>
}

@code {
    [Parameter]
    public string Email { get; set; } = "";

    [Parameter]
    public IEnumerable<ProductDto> Products { get; set; } = new List<ProductDto>();

    [Parameter]
    public IEnumerable<AdditionDto> Additions { get; set; } = new List<AdditionDto>();

    [Parameter]
    public IEnumerable<ProductSaleDto> ProductSales { get; set; } = new List<ProductSaleDto>();
    
    [Parameter]
    public EventCallback<AddOrderDto> OnSend { get; set; }

    public string? Errors { get; set; }

    private ProductDto? _productToAdd { get; set; }
    private AdditionDto? _additionToAdd { get; set; }

    private List<ProductSaleDto> _productSales { get; set; } = new();
    private Guid _productSaleToDelete = Guid.Empty;
    private string? _note { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!Products.Any())
        {
            Errors = "Products are required to complete Order form, please ensure that collection is not empty. ";
        }

        if (Email is null)
        {
            Errors += "Something bad happen, please try again later or contact with support ";
        }

        _productSales.AddRange(ProductSales);
    }

    private void ProductChoosed(ProductDto productDto)
    {
        if (_productToAdd is not null && _productToAdd.Id == productDto.Id)
        {
            _productToAdd = null;
            _additionToAdd = null;
            return;
        }

        _productToAdd = productDto;
    }

    private void AdditionChoosed(AdditionDto additionDto)
    {
        if (_additionToAdd is not null && _additionToAdd.Id == additionDto.Id)
        {
            _additionToAdd = null;
            return;
        }

        _additionToAdd = additionDto;
    }

    private async Task AddProductSale()
    {
        var productSale = new ProductSaleDto
        {
            Product = _productToAdd,
            Email = Email,
            ProductSaleState = "New",
            Addition = _additionToAdd,
            EndPrice = _additionToAdd is not null ? _productToAdd.Price + _additionToAdd.Price : _productToAdd.Price
        };
        await ProductSaleService.AddAsync(productSale);
        _productSales.Add(productSale);
    }

    private void MarkToDelete(ProductSaleDto productSaleDto)
    {
        if (_productSaleToDelete == productSaleDto.Id)
        {
            _productSaleToDelete = Guid.Empty;
            return;
        }

        _productSaleToDelete = productSaleDto.Id;
    }

    private async Task DeleteProductSale()
    {
        if (_productSaleToDelete == Guid.Empty)
        {
            return;
        }

        await ProductSaleService.DeleteAsync(_productSaleToDelete);
        var productSale = _productSales.SingleOrDefault(ps => ps.Id == _productSaleToDelete);

        if (productSale is not null)
        {
            _productSales.Remove(productSale);
        }

        _productSaleToDelete = Guid.Empty;
    }

    private async Task CreateOrder()
    {
        await OnSend.InvokeAsync(new AddOrderDto { Email = Email, ProductSaleIds = _productSales.Select(ps => ps.Id), Note = _note });
    }
}
