@using Restaurant.UI.Components.Additions
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.NavigationButton
@using Restaurant.UI.Components.Products
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@inject IProductSaleService ProductSaleService;
@inject AuthenticationStateProvider AuthenticationStateProvider;

@if (!string.IsNullOrWhiteSpace(Errors))
{
    <ErrorComponent Text="@Errors" />
    <NavigationButtonComponent Text="Go back to Home" Url="/" />
}
else
{
    <div class="item-list mb-2">
        @foreach (var product in Products)
        {
            <div class="me-2 mb-2">
                <ProductViewComponent CssClass="@(ProductToAdd is not null && ProductToAdd.Id == product.Id ? "bg-info" : "")" Product="product" OnClick="() => ProductChoosed(product)" />
            </div>
        }
    </div>
    <div class="item-list mb-2">
        @foreach(var addition in Additions)
        {
            <div class="me-2 mb-2">
                <AdditionViewComponent CssClass="@(AdditionToAdd is not null && AdditionToAdd.Id == addition.Id ? "bg-info" : "")" Addition="addition" OnClick="() => AdditionChoosed(addition)" />
            </div>
        }
    </div>
    <div class="mb-4">
        <button class="btn btn-success  @(ProductToAdd is not null ? "" : "disabled")" @onclick="() => AddProductSale()">
            Add to Order
        </button>
    </div>
    <div>
        <div class="mb-2">
            <button class="btn btn-danger @(ProductSaleToDelete == Guid.Empty ? "disabled" : "") me-2" @onclick="() => DeleteProductSale()">
                Delete
            </button>
            <button class="btn btn-primary @(!ProductSales.Any() ? "disabled" : "") " @onclick="() => CreateOrder()">
                Create Order
            </button>
        </div>
        <table class="table table-striped table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <td>Id</td>
                    <td>Product Id</td>
                    <td>Product Name</td>
                    <td>Addition Id</td>
                    <td>Addition Name</td>
                    <td>Cost</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var productSale in ProductSales)
                {
                    <tr @onclick="() => MarkToDelete(productSale)" class="@(ProductSaleToDelete == productSale.Id ? "bg-success" : "")">
                        <td>
                            @productSale.Id
                        </td>
                        <td>
                            @productSale.Product.Id
                        </td>
                        <td>
                            @productSale.Product.ProductName
                        </td>
                        <td>
                            @(productSale.Addition is not null ? productSale.Addition.Id : "-")
                        </td>
                        <td>
                            @(productSale.Addition is not null ? productSale.Addition.AdditionName : "-")
                        </td>
                        <td>
                            @productSale.EndPrice
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="text-start">
        <table class="table mt-2">
            <thead>
                <tr>
                    <th scope="col">Total Cost</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@ProductSales.Sum(p => p.EndPrice).ToString("0.00")</td>
                </tr>
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter]
    public IEnumerable<ProductDto> Products { get; set; } = new List<ProductDto>();

    [Parameter]
    public IEnumerable<AdditionDto> Additions { get; set; } = new List<AdditionDto>();

    public string? Errors { get; set; }

    private ProductDto? ProductToAdd { get; set; }
    private AdditionDto? AdditionToAdd { get; set; }

    private List<ProductSaleDto> ProductSales { get; set; } = new();
    private Guid ProductSaleToDelete = Guid.Empty;
    private string Email { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!Products.Any())
        {
            Errors = "Products are required to complete Order form, please ensure that collection is not empty. ";
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState is null)
        {
            Errors += "Please sign in";
            return;
        }

        Email = authState.User.Claims.SingleOrDefault(c => c.Type == "email")?.Value;
    }

    private void ProductChoosed(ProductDto productDto)
    {
        if (ProductToAdd is not null && ProductToAdd.Id == productDto.Id)
        {
            ProductToAdd = null;
            AdditionToAdd = null;
            return;
        }

        ProductToAdd = productDto;
    }

    private void AdditionChoosed(AdditionDto additionDto)
    {
        if (AdditionToAdd is not null && AdditionToAdd.Id == additionDto.Id)
        {
            AdditionToAdd = null;
            return;
        }

        AdditionToAdd = additionDto;
    }

    private async Task AddProductSale()
    {
        var productSale = new ProductSaleDto
        {
            Product = ProductToAdd,
            Email = Email,
            ProductSaleState = "New",
            Addition = AdditionToAdd,
            EndPrice = AdditionToAdd is not null ? ProductToAdd.Price + AdditionToAdd.Price : ProductToAdd.Price
        };
        await ProductSaleService.AddAsync(productSale);
        ProductSales.Add(productSale);
    }

    private void MarkToDelete(ProductSaleDto productSaleDto)
    {
        if (ProductSaleToDelete == productSaleDto.Id)
        {
            ProductSaleToDelete = Guid.Empty;
            return;
        }

        ProductSaleToDelete = productSaleDto.Id;
    }

    private async Task DeleteProductSale()
    {
        if (ProductSaleToDelete == Guid.Empty)
        {
            return;
        }

        await ProductSaleService.DeleteAsync(ProductSaleToDelete);
        var productSale = ProductSales.SingleOrDefault(ps => ps.Id == ProductSaleToDelete);

        if (productSale is not null)
        {
            ProductSales.Remove(productSale);
        }
        
        ProductSaleToDelete = Guid.Empty;
    }

    private async Task CreateOrder()
    {
        // TODO Handle Creation
        // Think how it should behave when someone has something in cart?
    }
}
