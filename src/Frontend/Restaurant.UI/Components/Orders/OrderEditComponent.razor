@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.Inputs
@using Restaurant.UI.Components.Modal
@using Restaurant.UI.Components.NavigationButton
@using Restaurant.UI.Components.Table
@using Restaurant.UI.DTO;
@using System.ComponentModel.DataAnnotations;
@using System.Linq.Expressions;
@using Restaurant.UI.Services.Abstractions;
@inject IProductSaleService ProductSaleService;

@if (Order is null)
{
    <ErrorComponent Text="Invalid Order" />
}
else
{
    @if (!string.IsNullOrWhiteSpace(_error))
    {
        <ErrorComponent Text="@_error" />
    }

    <EditForm EditContext="@_editContext" OnValidSubmit="@HandleValidSubmit">
        <InputTextFormComponent Label="Email" Type="InputTextFormType.Email" @bind-Value="@_form.Email"
                            Error="@(GetValidationMessage(context, () => _form.Email))" />
        <div class="form-group">
            <label class="d-flex" for="text-area-notes">Note</label>
            <textarea id="text-area-notes" class="form-control text-area" @bind="@_form.Note" maxlength="5000" />
        </div>
        <div class="mt-2">
            <button class="btn btn-primary" type="button" @onclick="() => _openModal = true">
                Add New Product Sale
            </button>
        </div>
        <div class="mt-2">
            <TableComponent Items="_form.ProductSales">
                <DataColumn TRowData="ProductSaleDto" Title="Id" Expression="ps => ps.Id" />
                <DataColumn TRowData="ProductSaleDto" Title="Product Id" Expression="ps => ps.Product.Id" />
                <DataColumn TRowData="ProductSaleDto" Title="Product Name" Expression="ps => ps.Product.ProductName" />
                <DataColumn TRowData="ProductSaleDto" Title="Addition Id" Expression='ps => ps.Addition == null ? "-" : ps.Addition.Id' />
                <DataColumn TRowData="ProductSaleDto" Title="Addition Name" Expression='ps => ps.Addition == null ? "-" : (string.IsNullOrWhiteSpace(ps.Addition.AdditionName) ? "-" : ps.Addition.AdditionName)' />
                <DataColumn TRowData="ProductSaleDto" Title="Price" Expression="ps => ps.EndPrice" Format="{0:0.00}" />
                <DataColumn TRowData="ProductSaleDto" Title="Action" Context="productSale">
                    <button class="btn btn-danger" @onclick="() => DeleteProductSale(productSale.Id)">
                        Delete
                    </button>
                </DataColumn>
            </TableComponent>
        </div>
        <div class="mb-2">
            <button class="btn btn-success">
                Save
            </button>
            <NavigationButtonComponent Text="Cancel" Url="/orders" CssClass="btn btn-secondary" />
        </div>
    </EditForm>
    
    @if (_openModal)
    {
            <ModalComponent Title="Add ProductSale" OnClose="CloseModal">
                <Body>
                    <div>
                        Choose product and if you would like addition:
                    </div>
                    <div>
                        <TableComponent Items="Products.ToList()" TRowData="ProductDto" OnClick="(p) => ProductToChoose(p)" RowClass='(row, _) => row.Id == _productChoosed?.Id ? "table-success" : ""' PageSize="2">
                            <DataColumn TRowData="ProductDto" Title="Id" Expression="p => p.Id" />
                            <DataColumn TRowData="ProductDto" Title="Product Name" Expression="p => p.ProductName" />
                            <DataColumn TRowData="ProductDto" Title="Product Kind" Expression="p => p.ProductKind" />
                            <DataColumn TRowData="ProductDto" Title="Price" Expression="p => p.Price" Format="{0:0.00}" />
                        </TableComponent>
                    </div>
                    <div>
                        <TableComponent Items="Additions.ToList()" TRowData="AdditionDto" OnClick="(a) => AdditionToChoose(a)" RowClass='(row, _) => row.Id == _additionChoosed?.Id ? "table-success" : ""' PageSize="2">
                            <DataColumn TRowData="AdditionDto" Title="Id" Expression="a => a.Id" />
                            <DataColumn TRowData="AdditionDto" Title="Addition Name" Expression="a => a.AdditionName" />
                            <DataColumn TRowData="AdditionDto" Title="Addition Kind" Expression="a => a.AdditionKind" />
                            <DataColumn TRowData="AdditionDto" Title="Price" Expression="a => a.Price" Format="{0:0.00}" />
                        </TableComponent>
                    </div>
                    <div>
                        <div>
                            End Price:
                        </div>
                        <div>
                            @CalculateEndPrice()
                        </div>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(_errorAddNewProduct))
                    {
                        <div>
                            <ErrorComponent Text="@_errorAddNewProduct" />
                        </div>
                    }
            </Body>
                <Footer>
                <button class="btn btn-success me-2" @onclick="AddProductSale">
                        Add
                    </button>
                    <button class="btn btn-secondary" @onclick="CloseModal">
                        Cancel
                    </button>
                </Footer>
        </ModalComponent>
    }
}


@code {
    [Parameter]
    public OrderDetailsDto? Order { get; set; }

    [Parameter]
    public IEnumerable<ProductDto> Products { get; set; } = new List<ProductDto>();

    [Parameter]
    public IEnumerable<AdditionDto> Additions { get; set; } = new List<AdditionDto>();

    [Parameter]
    public EventCallback<OrderDetailsDto> OnSend { get; set; }

    private Form? _form;
    private EditContext? _editContext;
    private string _error = "";
    private bool _openModal = false;
    private ProductSaleDto? _productSaleChoosed;
    private ProductDto? _productChoosed;
    private AdditionDto? _additionChoosed;
    private string _errorAddNewProduct = "";

    private class Form
    {
        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        public string? Note { get; set; }

        public List<ProductSaleDto> ProductSales { get; set; } = new();
    }

    protected override void OnInitialized()
    {
        _form = new Form { Email = Order.Email, Note = Order.Note, ProductSales = new List<ProductSaleDto>(Order.Products) };
        _editContext = new(_form);
        base.OnInitialized();
    }

    private string GetValidationMessage(EditContext editContext, Expression<Func<object>> field)
    {
        var validationMessage = editContext.GetValidationMessages(field).FirstOrDefault();
        return validationMessage ?? "";
    }

    private async Task HandleValidSubmit()
    {
        if (_editContext is null)
        {
            _error = "Something bad happen, please try again later";
            return;
        }

        if (!_editContext.Validate())
        {
            return;
        }

        await OnSend.InvokeAsync(new OrderDetailsDto
        {
            Id = Order.Id,
            Created = Order.Created,
            Email = _form.Email,
            Note = _form.Note,
            OrderNumber = Order.OrderNumber,
            Price = _form.ProductSales.Sum(ps => ps.EndPrice),
            Products = _form.ProductSales
        });
    }

    private void ProductSaleToChoose(ProductSaleDto dto)
    {
        if (_productSaleChoosed is not null && _productSaleChoosed.Id == dto.Id)
        {
            _productSaleChoosed = null;
            return;
        }

        _productSaleChoosed = dto;
    }

    private void ProductToChoose(ProductDto dto)
    {
        if (_productChoosed is not null && _productChoosed.Id == dto.Id)
        {
            _productChoosed = null;
            _additionChoosed = null;
            return;
        }

        _productChoosed = dto;
    }

    private void AdditionToChoose(AdditionDto dto)
    {
        if (_additionChoosed is not null && _additionChoosed.Id == dto.Id)
        {
            _additionChoosed = null;
            return;
        }

        _additionChoosed = dto;
    }

    private string CalculateEndPrice()
    {
        var endPrice = decimal.Zero;

        if (_productChoosed is not null)
        {
            endPrice += _productChoosed.Price;
        }

        if (_additionChoosed is not null)
        {
            endPrice += _additionChoosed.Price;
        }

        return string.Format("{0:0.00}", endPrice);
    }

    private async Task DeleteProductSale(Guid id)
    {
        await ProductSaleService.DeleteAsync(id);
        _form.ProductSales = new List<ProductSaleDto>(_form.ProductSales.Where(ps => ps.Id != id)); ;
    }

    private async Task AddProductSale()
    {
        if (_productChoosed is null)
        {
            _errorAddNewProduct = "You have to choose product";
            return;
        }

        var productSale = new ProductSaleDto
        {
            Email = _form.Email,
            ProductSaleState = "New",
            Product = _productChoosed,
            Addition = _additionChoosed,
            EndPrice = _additionChoosed is not null ? _productChoosed.Price + _additionChoosed.Price : _productChoosed.Price,
            Order = Order
        };
        await ProductSaleService.AddAsync(productSale);
        var productSales = new List<ProductSaleDto>(_form.ProductSales);
        productSales.Add(productSale);
        _form.ProductSales = productSales;
        _errorAddNewProduct = "";
        StateHasChanged();
        _openModal = false;
    }

    private void CloseModal()
    {
        _errorAddNewProduct = "";
        _productChoosed = null;
        _additionChoosed = null;
        _openModal = false;
    }
}
