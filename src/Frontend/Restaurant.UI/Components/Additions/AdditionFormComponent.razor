@using Restaurant.UI.Components.Inputs
@using Restaurant.UI.Components.Validations;
@using Restaurant.UI.DTO;

<EditForm Model="@FormToSend" OnValidSubmit="@HandleValidSubmit">
    <div>
        <div class="mb-2">
            <InputTextFormComponent Label="Name" Value="@FormToSend.AdditionName.Value" ValueChanged="(v) => ValidateAdditionName(v)" ValueExpression="@(() => FormToSend.AdditionName.Value)" Error="@FormToSend.AdditionName.Error" />
        </div>
        <div class="mb-2">
            <InputNumberFormComponent Label="Price" Value="@FormToSend.Price.Value" ValueChanged="(v) => ValidatePrice(v)" ValueExpression="@(() => FormToSend.Price.Value)" Error="@FormToSend.Price.Error" Step="0.01" />
        </div>
        <div class="mb-2">
            <InputSelectFormComponent Label="Kind" Value="@FormToSend.AdditionKind.Value" TData="string" ValueChanged="(v) => ValidateAdditionKind(v)"
                    Options="@(new Dictionary<string, string> { { "Drink", "Drink" }, { "Salad", "Salad" } })" />
        </div>
    </div>                                                                                                                        
    <button class="btn btn-success mt-2">
        Send
    </button>
</EditForm>

@code {
    [Parameter]
    public AdditionDto? Addition { get; set; }

    [Parameter]
    public EventCallback<AdditionDto> OnSend { get; set; }

    private class Form
    {
        public Guid Id { get; set; }
        public FormProperty<string?> AdditionName { get; set; } = new FormProperty<string?>
        {
            Rules = new List<Func<string?, string>>
            {
                (s) => string.IsNullOrWhiteSpace(s) ? "Name cannot be empty" : "",
                (s) => s?.Length < 3 ? "Name should contain at least 3 characters" : ""
            }
        };

        public FormProperty<decimal> Price { get; set; } = new FormProperty<decimal>()
        {
            Rules = new List<Func<decimal, string>>
            {
                (p) => p < 0 ? "Price cannot be negative" : ""
            }
        };

        public FormProperty<string?> AdditionKind { get; set; } = new FormProperty<string?>()
        {
            Rules = new List<Func<string?, string>>
            {
                (s) => string.IsNullOrWhiteSpace(s) ? "Kind cannot be empty" : "",
            }
        };

        public void ClearErrors()
        {
            AdditionName.Error = "";
            Price.Error = "";
            AdditionKind.Error = "";
        }

        public bool Validate()
        {
            var isValid = true;
            isValid = AdditionName.IsValid() ? isValid : false;
            isValid = Price.IsValid() ? isValid : false;
            isValid = AdditionKind.IsValid() ? isValid : false;
            return isValid;
        }
    }

    private Form FormToSend = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Addition is not null)
        {
            FormToSend.Id = Addition.Id;
            FormToSend.AdditionName.Value = Addition.AdditionName;
            FormToSend.Price.Value = Addition.Price;
            FormToSend.AdditionKind.Value = Addition.AdditionKind;
        }
    }

    private async Task HandleValidSubmit()
    {
        FormToSend.ClearErrors();
        var isValid = FormToSend.Validate();

        if (!isValid)
        {
            return;
        }

        await OnSend.InvokeAsync(new AdditionDto
        {
            AdditionName = FormToSend.AdditionName.Value,
            Price = FormToSend.Price.Value,
            AdditionKind = FormToSend.AdditionKind.Value
        });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    private void ValidateAdditionName(string additionName)
    {
        FormToSend.AdditionName.Value = additionName;
        FormToSend.AdditionName.IsValid();
    }

    private void ValidatePrice(decimal price)
    {
        FormToSend.Price.Value = price;
        FormToSend.Price.IsValid();
    }

    private void ValidateAdditionKind(string additionKind)
    {
        FormToSend.AdditionKind.Value = additionKind;
        FormToSend.AdditionKind.IsValid();
    }
}