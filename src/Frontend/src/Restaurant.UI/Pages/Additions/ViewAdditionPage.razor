@page "/additions/view/{id:guid}"
@using Restaurant.UI.Components.Additions
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.LoadingIcon
@using Restaurant.UI.Components.NavigationButton
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@attribute [Authorize]
@inject IAdditionService AdditionService;
@inject ILogger<ViewAdditionPage> Logger;

<h3>ViewAdditionComponent</h3>

@if (Loading)
{
    <LoadingIconComponent />
}
else
{
    @if (!string.IsNullOrWhiteSpace(_error))
    {
        <div class="mt-2">
            <ErrorComponent Text="@_error" />
        </div>
    }
    else
    {
        <div class="mt-2">
            <AdditionViewComponent Addition="Addition" />
        </div>
    }
    <div class="mt-2">
        <NavigationButtonComponent Url="/additions" Text="Back to Additions" />
    </div>
}


@code {
    [Parameter]
    public Guid Id { get; set; }

    private bool Loading { get; set; } = true;

    private AdditionDto? Addition;
    private string _error = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            Addition = await AdditionService.GetAsync(Id);
        }
        catch (Exception exception) 
        {
            _error = "Something bad happen please try again later";

            if (exception is RpcException)
            {
                var grpcException = exception as RpcException;
                if (grpcException.Status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    _error = grpcException.Status.Detail;
                }
            }

            Logger.LogError(exception, _error);
        }
        Loading = false;
    }
}
