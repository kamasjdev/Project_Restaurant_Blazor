@page "/additions/edit/{id:guid}"
@using Restaurant.UI.Components
@using Restaurant.UI.Components.Additions
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.LoadingIcon
@using Restaurant.UI.Components.NavigationButton
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@inject NavigationManager NavigationManager;
@inject IAdditionService AdditionService;
@inject ILogger<EditAdditionPage> Logger;

<h3>EditAdditionPage</h3>
<AuthorizationComponent Roles="admin" />

@if (Loading)
{
    <LoadingIconComponent />
}
else
{
    if (Addition is null)
    {
        <div class="mt-2">
            <ErrorComponent Text="@_error" />
        </div>
        <div class="mt-2">
            <NavigationButtonComponent Url="/additions" Text="Back to Additions" />
        </div>
    }
    else
    {
        @if (!string.IsNullOrWhiteSpace(_error))
        {
            <div class="mt-2 mb-2">
                <ErrorComponent Text="@_error" />
            </div>
        }
        <AdditionFormComponent Addition="Addition" OnSend="Send" OnCancelClickButton='() => NavigationManager.NavigateTo("/additions")' />
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    public AdditionDto? Addition { get; set; }
    public bool Loading { get; set; } = true;
    private string _error = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            Addition = await AdditionService.GetAsync(Id);
        }
        catch(Exception exception)
        {
            _error = "Something bad happen please try again later";

            if (exception is RpcException)
            {
                var grpcException = exception as RpcException;
                if (grpcException.Status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    _error = grpcException.Status.Detail;
                }
            }

            Logger.LogError(exception, _error);
        }
        Loading = false;
    }

    private async Task Send(AdditionDto additionDto)
    {
        _error = "";
        additionDto.Id = Id;

        try
        {
            await AdditionService.UpdateAsync(additionDto);
            NavigationManager.NavigateTo("/additions");
        }

        catch (Exception exception)
        {
            _error = "Something bad happen please try again later";

            if (exception is RpcException)
            {
                var grpcException = exception as RpcException;
                if (grpcException.Status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    _error = grpcException.Status.Detail;
                }
            }

            Logger.LogError(exception, _error);
        }
    }
}
