@page "/sign-in"
@attribute [AllowAnonymous]
@using Restaurant.UI.Components
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.Inputs;
@using System.ComponentModel.DataAnnotations;
@using System.Linq.Expressions;
@using Restaurant.UI.Components.NavigationButton
@using Restaurant.UI.Security;
@using Restaurant.UI.Services.Abstractions;
@inject IAuthenticationService AuthenticationService;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject ILogger<SignInPage> Logger;

<h3>Login</h3>

<AuthorizeView>
    <Authorized>
        <RedirectToComponent Path="/" />
    </Authorized>
</AuthorizeView>

@if (!string.IsNullOrWhiteSpace(Error))
{
    <ErrorComponent Text="@Error" />
}
<EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <InputTextFormComponent Label="Email" Type="InputTextFormType.Email" @bind-Value="Form.Email" Error="@(GetValidationMessage(context, () => Form.Email))" />
    <InputTextFormComponent Label="Password" Type="InputTextFormType.Password" @bind-Value="Form.Password" Error="@(GetValidationMessage(context, () => Form.Password))" />
    <div class="mt-2">
        <button class="btn btn-success" type="submit">Login</button>
        <NavigationButtonComponent Text="Cancel" Url="/" />
    </div>
</EditForm>


@code {
    public bool Loading { get; set; }
    public string? Error;
    public SignInForm Form { get; set; } = new();
    public EditContext? EditContext;

    public class SignInForm
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        public string Password { get; set; } = "";
    }

    protected override void OnInitialized()
    {
        EditContext = new(Form);
        base.OnInitialized();
    }

    public string GetValidationMessage(EditContext editContext, Expression<Func<object>> field)
    {
        var validationMessage = editContext.GetValidationMessages(field).FirstOrDefault();
        return validationMessage ?? "";
    }

    private async Task HandleValidSubmit()
    {
        Error = "";
        if (EditContext is null)
        {
            Error = "Something bad happen, please try again later";
            return;
        }

        if (!EditContext.Validate())
        {
            return;
        }

        try
        {
            await AuthenticationService.SignInAsync(new DTO.SignInDto(Form.Email, Form.Password));
            NavigationManager.NavigateTo("/");
        }
        catch (Exception exception)
        {
            if (exception is RpcException)
            {
                var status = ((RpcException)exception).Status;

                if (status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    Error = status.Detail;
                }
                else
                {
                    Error = "Something bad happen please try again later";
                }
            }

            Logger.LogError(exception, exception.Message);
        }
    }
}
