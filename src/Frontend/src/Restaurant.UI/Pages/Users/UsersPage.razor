@page "/users"
@using Restaurant.UI.Components
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.LoadingIcon
@using Restaurant.UI.Components.Modal
@using Restaurant.UI.Components.NavigationButton
@using Restaurant.UI.Components.Table
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@inject IUserService UserService;
@inject NavigationManager NavigationManager;
@inject ILogger<UsersPage> Logger;

<AuthorizationComponent Roles="admin" />
<h3>Users</h3>

@if (_loading)
{
    <LoadingIconComponent />
}
else
{
    @if (!string.IsNullOrWhiteSpace(_error))
    {
	    <ErrorComponent Text="@_error" />
    }
    <NavigationButtonComponent CssClass="btn btn-success mt-2 mb-2" Url="/users/add" Text="Add" />
    <TableComponent Items="_users.ToList()">
        <DataColumn TRowData="UserDto" Title="Id" Expression="u => u.Id" />
        <DataColumn TRowData="UserDto" Title="Email" Expression="u => u.Email" />
        <DataColumn TRowData="UserDto" Title="Created" Expression="u => u.CreatedAt" />
        <DataColumn TRowData="UserDto" Title="Role" Expression="u => u.Role" />
        <DataColumn TRowData="UserDto" Title="Action">
            <button class="btn btn-warning me-2" @onclick='() => NavigationManager.NavigateTo($"/users/edit/{context.Id}")'>
                Edit
            </button>
            <button class="btn btn-danger" @onclick="() => OpenModal(context)">
                Delete
            </button>
        </DataColumn>
    </TableComponent>

    @if (_modalOpen)
    {
        <ModalComponent Title="Delete Addition" OnClose="CloseModal">
            <Body>
                <div class="text-info-delete">
                    Do you wish to delete user @_userToDelete?.Email with id @_userToDelete?.Id
                </div>
                @if (!string.IsNullOrWhiteSpace(_errorDeleteRequest))
                {
                    <ErrorComponent Text="@_errorDeleteRequest" />
                }
            </Body>
            <Footer>
                <button class="btn btn-danger me-2" @onclick="DeleteUser">
                    Yes
                </button>
                <button class="btn btn-secondary" @onclick="CloseModal">
                    No
                </button>
            </Footer>
        </ModalComponent>
    }
}

@code {
    private IEnumerable<UserDto> _users = new List<UserDto>();
    private bool _loading = true;
    private bool _modalOpen = false;
    private UserDto? _userToDelete;
    private string _error = "";
    private string _errorDeleteRequest = "";

    protected override async Task OnInitializedAsync()
    {
        await FetchUsers();
        await base.OnInitializedAsync();
    }

    private void OpenModal(UserDto dto)
    {
        _modalOpen = true;
        _userToDelete = dto;
        _errorDeleteRequest = "";
    }

    private void CloseModal()
    {
        _userToDelete = null;
        _errorDeleteRequest = "";
        _modalOpen = false;
    }

    private async Task DeleteUser()
    {
        try
        {
            await UserService.DeleteAsync(_userToDelete.Id);
            await FetchUsers();
            CloseModal();
        }
        catch (Exception exception)
        {
            if (exception is RpcException)
            {
                var status = ((RpcException)exception).Status;

                if (status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    _errorDeleteRequest = status.Detail;
                }
                else
                {
                    _errorDeleteRequest = "Something bad happen please try again later";
                }
            }

            Logger.LogError(exception, exception.Message);
        }
    }

    private async Task FetchUsers()
    {
        _loading = true;
        try
        {    
            _users = await UserService.GetAllAsync();
        }
        catch (Exception exception)
        {
            if (exception is RpcException)
            {
                var status = ((RpcException)exception).Status;

                if (status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    _error = status.Detail;
                }
                else
                {
                    _error = "Something bad happen please try again later";
                }
            }

            Logger.LogError(exception, exception.Message);
        }
        _loading = false;
    }
}
