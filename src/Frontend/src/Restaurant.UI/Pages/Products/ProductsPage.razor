@page "/products"
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.LoadingIcon
@using Restaurant.UI.Components.Modal
@using Restaurant.UI.Components.Table
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@attribute [Authorize]
@inject IProductService ProductService;
@inject NavigationManager NavigationManager;
@inject ILogger<ProductsPage> Logger;

<h3>ProductsPage</h3>

<AuthorizeView Roles="admin">
    <Authorized>
        <button class="btn btn-success" @onclick='() => NavigationManager.NavigateTo("/products/add")'>
            Add
        </button>
    </Authorized>
</AuthorizeView>

@if (Loading)
{
    <LoadingIconComponent />
}
else
{
    
    @if (!string.IsNullOrWhiteSpace(Error))
    {
	    <ErrorComponent Text="@Error" />
    }
    <TableComponent Items="Products">
        <DataColumn TRowData="ProductDto" Title="Id" Expression="p => p.Id" />
        <DataColumn TRowData="ProductDto" Title="Name" Expression="p => p.ProductName" />
        <DataColumn TRowData="ProductDto" Title="Price" Expression="p => p.Price" Format="{0:0.00}" />
        <DataColumn TRowData="ProductDto" Title="Kind" Expression="p => p.ProductKind" />
        <DataColumn TRowData="ProductDto" Title="Action">
            <button class="btn btn-primary me-2" @onclick='() => NavigationManager.NavigateTo($"/products/view/{context.Id}")'>
                Details
            </button>
            <AuthorizeView Context="Auth" Roles="admin">
                <Authorized>
                    <button class="btn btn-warning me-2" @onclick='() => NavigationManager.NavigateTo($"/products/edit/{context.Id}")'>
                        Edit
                    </button>
                    <button class="btn btn-danger" @onclick="() => OpenModal(context)">
                        Delete
                    </button>
                </Authorized>
            </AuthorizeView>
        </DataColumn>
    </TableComponent>
}

@if (IsModalOpen)
{
    <ModalComponent Title="Delete Product" OnClose="CloseModal">
        <Body>
            <div class="text-info-delete">
                Do you wish to delete product @ProductToDelete?.ProductName with id @ProductToDelete?.Id
            </div>
            @if (!string.IsNullOrWhiteSpace(ErrorDeleteRequest))
            {
                <ErrorComponent Text="@ErrorDeleteRequest" />
            }
        </Body>
        <Footer>
            <button class="btn btn-danger me-2" @onclick="DeleteProduct">
                Yes
            </button>
            <button class="btn btn-secondary" @onclick="CloseModal">
                No
            </button>
        </Footer>
    </ModalComponent>
}

@code {
    public ICollection<ProductDto>? Products;
    public ProductDto? ProductToDelete;
    public string Error = "";
    public string ErrorDeleteRequest = "";

    public bool IsModalOpen { get; set; } = false;
    public bool Loading { get; set; }

    private async Task FetchProducts()
    {
        Loading = true;
        try
        {   
            Products = new List<ProductDto>(await ProductService.GetAllAsync());
        }
        catch (Exception exception)
        {
            Error = "Something bad happen please try again later";

            if (exception is RpcException)
            {
                var status = ((RpcException)exception).Status;

                if (status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    Error = status.Detail;
                }
            }

            Logger.LogError(exception, exception.Message);
        }
        Loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await FetchProducts();
    }

    private void OpenModal(ProductDto productDto)
    {
        IsModalOpen = true;
        ProductToDelete = productDto;
        ErrorDeleteRequest = "";
    }

    private void CloseModal()
    {
        IsModalOpen = false;
        ErrorDeleteRequest = "";
        ProductToDelete = null;
    }

    private async Task DeleteProduct()
    {
        try
        {
            ErrorDeleteRequest = "";
            await ProductService.DeleteAsync(ProductToDelete.Id);
            CloseModal();
            await FetchProducts();
        }
        catch (Exception exception)
        {
            if (exception is RpcException)
            {
                var status = ((RpcException)exception).Status;

                if (status.StatusCode is StatusCode.PermissionDenied or StatusCode.FailedPrecondition)
                {
                    ErrorDeleteRequest = status.Detail;
                }
                else
                {
                    ErrorDeleteRequest = "Something bad happen please try again later";
                }
            }

            Logger.LogError(exception, exception.Message);
        }
    }
}
