@page "/products/edit/{id:guid}"
@using Restaurant.UI.Components
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.LoadingIcon
@using Restaurant.UI.Components.NavigationButton
@using Restaurant.UI.Components.Products
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@inject NavigationManager NavigationManager;
@inject IProductService ProductService;
@inject ILogger<EditProductPage> Logger;

<h3>EditProductPage</h3>

<AuthorizationComponent Roles="admin" />

@if (Loading)
{
    <LoadingIconComponent />
}
else
{
    if (Product is null)
    {
        <div class="mt-2">
            <ErrorComponent Text="@($"Product with id '{Id}' was not found")" />
        </div>
        <div class="mt-2">
            <NavigationButtonComponent Url="/products" Text="Back to Products" />
        </div>
    }
    else
    {
        @if (!string.IsNullOrWhiteSpace(Error))
        {
            <ErrorComponent Text="@Error" />
        }
        <ProductFormComponent Product="Product" OnSend="Send" OnCancelClickButton='() => NavigationManager.NavigateTo("/additions")' />
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    public ProductDto? Product { get; set; }
    public bool Loading { get; set; } = true;
    public string Error = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            Product = await ProductService.GetAsync(Id);
        }
        catch (Exception exception)
        {
            if (exception is RpcException)
            {
                var status = ((RpcException)exception).Status;

                if (status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    Error = status.Detail;
                }
                else
                {
                    Error = "Something bad happen please try again later";
                }
            }

            Logger.LogError(exception, exception.Message);
        }
        Loading = false;
    }

    private async Task Send(ProductDto productDto)
    {
        try
        {
            Error = "";
            await ProductService.UpdateAsync(productDto);
            NavigationManager.NavigateTo("/products");
        }
        catch (Exception exception)
        {
            if (exception is RpcException)
            {
                var status = ((RpcException)exception).Status;

                if (status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
                {
                    Error = status.Detail;
                }
                else
                {
                    Error = "Something bad happen please try again later";
                }
            }

            Logger.LogError(exception, exception.Message);
        }
    }
}
