@page "/products/add"
@using Restaurant.UI.Components
@using Restaurant.UI.Components.Errors
@using Restaurant.UI.Components.Products
@using Restaurant.UI.DTO;
@using Restaurant.UI.Services.Abstractions;
@inject NavigationManager NavigationManager;
@inject IProductService ProductService;
@inject ILogger<AddProductPage> Logger;


<h3>AddProductPage</h3>

@if (!string.IsNullOrWhiteSpace(Error))
{
	<ErrorComponent Text="@Error" />
}
<ProductFormComponent OnSend="Send" OnCancelClickButton='() => NavigationManager.NavigateTo("/products")' />
<AuthorizationComponent Roles="admin" />

@code {
	public string Error = "";

	private async Task Send(ProductDto productDto)
	{
		try
		{
			Error = "";
			await ProductService.AddAsync(productDto);
            NavigationManager.NavigateTo("/products");
        }
		catch (Exception exception)
		{
			if (exception is RpcException)
			{
				var status = ((RpcException)exception).Status;

				if (status.StatusCode is StatusCode.InvalidArgument or StatusCode.FailedPrecondition)
				{
					Error = status.Detail;
				}
				else
				{
					Error = "Something bad happen please try again later";
				}
			}

			Logger.LogError(exception, exception.Message);
		}
    }
}
