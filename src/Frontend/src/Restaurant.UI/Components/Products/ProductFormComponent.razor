@using Restaurant.UI.Components.Inputs
@using Restaurant.UI.DTO;
@using System.Linq.Expressions;
@using Restaurant.UI.Pages;

<EditForm Model="@Product" OnValidSubmit="@HandleValidSubmit">
    <FluentValidationValidator @ref="_fluentValidationValidator" />

    <div>
        <div class="mb-2">
            <InputTextFormComponent Label="Name" @bind-Value="@Product.ProductName" Error="@(context.GetValidationMessage(() => Product.ProductName))" />
        </div>
        <div class="mb-2">
            <InputNumberFormComponent Label="Price" @bind-Value="@Product.Price" Step="0.01" Error="@(context.GetValidationMessage(() => Product.Price))" />
        </div>
        <div class="mb-2">
            <InputSelectFormComponent Label="Kind" @bind-Value="@Product.ProductKind" TData="string"
                    Options="@(new Dictionary<string, string> { { "Pizza", "Pizza" } , { "MainDish", "MainDish" } , { "Soup", "Soup" } })" />
            <ValidationMessage For="@(() => Product.ProductKind)" />
        </div>
    </div>
    <div class="mt-2">
        <button class="btn btn-success me-2">
            Send
        </button>
        <button class="btn btn-secondary" @onclick="() => OnCancelClickButton?.Invoke()">
            Cancel
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public ProductDto Product { get; set; } = new();

    [Parameter]
    public EventCallback<ProductDto> OnSend { get; set; }

    [Parameter]
    public Action? OnCancelClickButton { get; set; }

    private FluentValidationValidator? _fluentValidationValidator;

    private async Task HandleValidSubmit()
    {
        if (!_fluentValidationValidator!.Validate(opt => opt.IncludeAllRuleSets()))
        {
            return;
        }

        await OnSend.InvokeAsync(Product);
    }
}
